AWSTemplateFormatVersion: '2010-09-09'
Description: Resources for Wild Ryde rider photo processing workflow.
Transform: AWS::Serverless-2016-10-31
Parameters:
  RekognitionCollectionID:
    Description: ID for the Rekognition collection used to index faces
    Type: String
    Default: rider-photos
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '[a-zA-Z0-9_.-]+'
  TestImagesBucket:
    Type: String
    Default: wild-rydes-sfn-module-us-west-2
    Description: S3 bucket containing the test images to copy over
  TestImagesPrefix:
    Type: String
    Default: test-images/
    Description: Key prefix for test images to copy over
Resources:
  RiderPhotoS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - PUT
          - GET
          - POST
          - HEAD
          AllowedOrigins:
          - '*'
          ExposedHeaders:
          - ETag
  ThumbnailS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - PUT
          - GET
          - POST
          - HEAD
          AllowedOrigins:
          - '*'
          ExposedHeaders:
          - ETag
  RiderPhotoDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: Username
        AttributeType: S
      KeySchema:
      - AttributeName: Username
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  FaceDetectionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Use Amazon Rekognition to detect faces
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 256
      Timeout: 60
      Policies:
        Statement:
        - Sid: ReadFromS3Bucket
          Effect: Allow
          Action:
          - s3:GetObject
          Resource: '*'
        - Sid: RekognitionFace
          Effect: Allow
          Action:
          - rekognition:DetectFaces
          Resource: '*'
        - Action: dynamodb:PutItem
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${FaceDetectionMetricsTable}
      CodeUri: s3://wildrydes1-eu-central-1/ImageProcessing/a73d5c3a128b85813ce2dbb1ca6cf4b5
  FaceDetectionMetricsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: long.ma.cancel-booking-metrics
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
  NotificationPlaceholderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: mock notification sender
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 256
      Timeout: 60
      CodeUri: s3://wildrydes1-eu-central-1/ImageProcessing/8ff2034487ac3fcc6f40965d474f2c43
      Policies:
        Statement:
        - Action: dynamodb:PutItem
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NotificationMetricsTable}
  NotificationMetricsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: NotificationMetrics
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
  FaceSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Use Amazon Rekognition to check if the face is already in the collection
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 256
      Timeout: 60
      Policies:
        Statement:
        - Sid: ReadFromS3Bucket
          Effect: Allow
          Action:
          - s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${RiderPhotoS3Bucket}/*
        - Sid: SearchFace
          Effect: Allow
          Action:
          - rekognition:SearchFacesByImage
          Resource: '*'
        - Action: dynamodb:PutItem
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${FaceSearchMetricsTable}
      CodeUri: s3://wildrydes1-eu-central-1/ImageProcessing/7414eebeb62210a7d40e517d329026e0
      Environment:
        Variables:
          REKOGNITION_COLLECTION_ID:
            Ref: RekognitionCollectionID
  FaceSearchMetricsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: FaceSearchMetrics
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
  IndexFaceFunction:
    Properties:
      Description: Index the photo into Rekognition collection
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 256
      Timeout: 60
      Policies:
        Statement:
        - Sid: ReadFromS3Bucket
          Effect: Allow
          Action:
          - s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${RiderPhotoS3Bucket}/*
        - Sid: SearchFace
          Effect: Allow
          Action:
          - rekognition:IndexFaces
          Resource: '*'
        - Action: dynamodb:PutItem
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${IndexFaceMetricsTable}
      CodeUri: s3://wildrydes1-eu-central-1/ImageProcessing/32f35f2961811817ef7216623215edea
      Environment:
        Variables:
          REKOGNITION_COLLECTION_ID:
            Ref: RekognitionCollectionID
    Type: AWS::Serverless::Function
  IndexFaceMetricsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: IndexFaceMetrics
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
  ThumbnailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 1536
      Timeout: 300
      Policies:
        Statement:
        - Sid: WritetoS3ThumbnailBucket
          Effect: Allow
          Action:
          - s3:PutObject
          Resource:
            Fn::Sub: arn:aws:s3:::${ThumbnailS3Bucket}/*
        - Sid: ReadFromS3
          Effect: Allow
          Action:
          - s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${RiderPhotoS3Bucket}/*
        - Action: dynamodb:PutItem
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ThumbnailTable}
      CodeUri: s3://wildrydes1-eu-central-1/ImageProcessing/1aacce442bb3bcb4017dc379c08cddd4
      Layers:
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:image-magick:1
      Environment:
        Variables:
          THUMBNAIL_BUCKET:
            Ref: ThumbnailS3Bucket
          MAX_WIDTH: 300
          MAX_HEIGHT: 300
  ThumbnailTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ThumbnailMetrics
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
  PersistMetadataFunction:
    Properties:
      Description: Save metadata of the photo to DynamoDB table
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 256
      Timeout: 60
      Environment:
        Variables:
          RIDER_PHOTOS_DDB_TABLE:
            Ref: RiderPhotoDDBTable
      Policies:
        Statement:
        - Sid: WriteToRiderPhotoDDBTable
          Effect: Allow
          Action:
          - dynamodb:PutItem
          Resource:
            Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${RiderPhotoDDBTable}
        - Action: dynamodb:PutItem
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${PersistMetadataTable}
      CodeUri: s3://wildrydes1-eu-central-1/ImageProcessing/0e7159e18954187ee726fd37cc45cdc3
    Type: AWS::Serverless::Function
  PersistMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PersistMetadataMetrics
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
  PopulateTestImages:
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - CopyS3ObjectsFunction
        - Arn
      SourceBucket:
        Ref: TestImagesBucket
      SourcePrefix:
        Fn::Sub: ${TestImagesPrefix}
      Bucket:
        Ref: RiderPhotoS3Bucket
    Type: Custom::S3Objects
  EmptyThumbnailBucket:
    Type: Custom::S3Objects
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - CopyS3ObjectsFunction
        - Arn
      Bucket:
        Ref: ThumbnailS3Bucket
  CopyS3ObjectsFunction:
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.7
      Timeout: 120
      Policies:
        Statement:
        - Sid: SourceBucketReadAccess
          Effect: Allow
          Action:
          - s3:ListBucket
          - s3:GetObject
          Resource:
          - Fn::Sub: arn:aws:s3:::${TestImagesBucket}
          - Fn::Sub: arn:aws:s3:::${TestImagesBucket}/${TestImagesPrefix}*
        - Sid: DestBucketWriteAccess
          Effect: Allow
          Action:
          - s3:ListBucket
          - s3:ListBucketVersions
          - s3:GetBucketVersioning
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:PutObject
          - s3:PutObjectAcl
          - s3:PutObjectVersionAcl
          - s3:DeleteObject
          - s3:DeleteObjectVersion
          - s3:CopyObject
          Resource:
          - Fn::Sub: arn:aws:s3:::${RiderPhotoS3Bucket}
          - Fn::Sub: arn:aws:s3:::${RiderPhotoS3Bucket}/*
          - Fn::Sub: arn:aws:s3:::${ThumbnailS3Bucket}
          - Fn::Sub: arn:aws:s3:::${ThumbnailS3Bucket}/*
      CodeUri: s3://wildrydes1-eu-central-1/ImageProcessing/bb44cd3dfc2679be87951daadacd6359
    Type: AWS::Serverless::Function
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              Fn::Sub: states.${AWS::Region}.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /WildRydes/
      Policies:
      - PolicyName: InvokeLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: InvokeLambda
            Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'
  APIGatewayToStepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
  APIGatewayToStepFunctions:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: APIGatewayToStepFunctions
      EndpointConfiguration:
        Types:
        - REGIONAL
      Name: APIGatewayToStepFunctions
  APIGatewayToStepFunctionsRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Credentials:
          Fn::GetAtt:
          - APIGatewayToStepFunctionsRole
          - Arn
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:states:action/StartExecution
          - stepArn:
              Fn::GetAtt:
              - RiderPhotoProcessing
              - Arn
        IntegrationResponses:
        - StatusCode: 200
      ResourceId:
        Fn::GetAtt:
        - APIGatewayToStepFunctions
        - RootResourceId
      RestApiId:
        Ref: APIGatewayToStepFunctions
      MethodResponses:
      - StatusCode: 200
  APIGatewayToStepFunctionsDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - APIGatewayToStepFunctionsRootMethod
    Properties:
      RestApiId:
        Ref: APIGatewayToStepFunctions
      StageName: execute
  RiderPhotoProcessing:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineType: EXPRESS
      DefinitionString:
        Fn::Sub:
        - "{\n  \"Comment\": \"Rider photo processing workflow\",\n  \"StartAt\":\
          \ \"FaceDetection\",\n  \"States\": {\n    \"FaceDetection\": {\n      \"\
          Type\": \"Task\",\n      \"Resource\": \"${FaceDetectionArn}\",\n      \"\
          ResultPath\": \"$.detectedFaceDetails\",\n      \"Next\": \"CheckFaceDuplicate\"\
          ,\n      \"Catch\": [\n        {\n          \"ErrorEquals\": [\n       \
          \     \"PhotoDoesNotMeetRequirementError\"\n          ],\n          \"ResultPath\"\
          : \"$.errorInfo\",\n          \"Next\": \"PhotoDoesNotMeetRequirement\"\n\
          \        }\n      ]\n    },\n    \"PhotoDoesNotMeetRequirement\": {\n  \
          \    \"Type\": \"Task\",\n      \"Resource\": \"${NotificationPlaceholderArn}\"\
          ,\n      \"End\": true\n    },\n    \"CheckFaceDuplicate\": {\n      \"\
          Type\": \"Task\",\n      \"Resource\": \"${FaceSearchArn}\",\n      \"ResultPath\"\
          : null,\n      \"Next\": \"ParallelProcessing\",\n      \"Catch\": [\n \
          \       {\n          \"ErrorEquals\": [\n            \"FaceAlreadyExistsError\"\
          \n          ],\n          \"ResultPath\": \"$.errorInfo\",\n          \"\
          Next\": \"PhotoDoesNotMeetRequirement\"\n        }\n      ]\n    },\n  \
          \  \"ParallelProcessing\": {\n      \"Type\": \"Parallel\",\n      \"Branches\"\
          : [\n        {\n          \"StartAt\": \"AddFaceToIndex\",\n          \"\
          States\": {\n            \"AddFaceToIndex\": {\n              \"Type\":\
          \ \"Task\",\n              \"Resource\": \"${IndexFaceArn}\",\n        \
          \      \"End\": true\n            }\n          }\n        },\n        {\n\
          \          \"StartAt\": \"Thumbnail\",\n          \"States\": {\n      \
          \      \"Thumbnail\": {\n              \"Type\": \"Task\",\n           \
          \   \"Resource\": \"${ThumbnailArn}\",\n              \"End\": true\n  \
          \          }\n          }\n        }\n      ],\n      \"ResultPath\": \"\
          $.parallelResult\",\n      \"Next\": \"PersistMetadata\"\n    },\n    \"\
          PersistMetadata\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"\
          ${PersistMetadataArn}\",\n      \"ResultPath\": null,\n      \"End\": true\n\
          \    }\n  }\n}\t"
        - FaceDetectionArn:
            Fn::GetAtt:
            - FaceDetectionFunction
            - Arn
          NotificationPlaceholderArn:
            Fn::GetAtt:
            - NotificationPlaceholderFunction
            - Arn
          FaceSearchArn:
            Fn::GetAtt:
            - FaceSearchFunction
            - Arn
          IndexFaceArn:
            Fn::GetAtt:
            - IndexFaceFunction
            - Arn
          ThumbnailArn:
            Fn::GetAtt:
            - ThumbnailFunction
            - Arn
          PersistMetadataArn:
            Fn::GetAtt:
            - PersistMetadataFunction
            - Arn
      RoleArn:
        Fn::GetAtt:
        - StateMachineRole
        - Arn
Outputs:
  apiGatewayInvokeURL:
    Value:
      Fn::Sub: https://${APIGatewayToStepFunctions}.execute-api.${AWS::Region}.amazonaws.com/execute/
  StateMachineArn:
    Value:
      Fn::GetAtt:
      - RiderPhotoProcessing
      - Arn
  FaceDetectionFunctionArn:
    Value:
      Fn::GetAtt:
      - FaceDetectionFunction
      - Arn
  NotificationPlaceholderFunctionArn:
    Value:
      Fn::GetAtt:
      - NotificationPlaceholderFunction
      - Arn
  FaceSearchFunctionArn:
    Value:
      Fn::GetAtt:
      - FaceSearchFunction
      - Arn
  IndexFaceFunctionArn:
    Value:
      Fn::GetAtt:
      - IndexFaceFunction
      - Arn
  ThumbnailFunctionArn:
    Value:
      Fn::GetAtt:
      - ThumbnailFunction
      - Arn
  PersistMetadataFunctionArn:
    Value:
      Fn::GetAtt:
      - PersistMetadataFunction
      - Arn
  RiderPhotoS3Bucket:
    Value:
      Ref: RiderPhotoS3Bucket
  ThumbnailS3Bucket:
    Value:
      Ref: ThumbnailS3Bucket
  RiderPhotoDDBTable:
    Value:
      Ref: RiderPhotoDDBTable
  StateMachineRole:
    Value:
      Fn::GetAtt:
      - StateMachineRole
      - Arn
